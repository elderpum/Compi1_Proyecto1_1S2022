/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc1.proyecto1_201700761;

import Estructuras.AFD;
import Estructuras.Errores;
import Estructuras.Validation;
import analizadores.Lexico;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Elder
 */
public class main extends javax.swing.JFrame {

    static FileNameExtensionFilter filtro = new FileNameExtensionFilter(" Archivo .exp", "exp","EXP","Exp");
    JFileChooser file = new JFileChooser();
    static File archivo;
    static FileInputStream entrada;
    static FileOutputStream salida;
    static String name = "";
    static String path = "";
    static String contenido = "";
    static String direccion = "";
    static Map<String, AFD> arboles = new HashMap<>();
    static List<Errores> errors = new ArrayList<>();
    static int actual = 0;
    static String rutaTotal;

    public main() {
        initComponents();
        this.setLocationRelativeTo(null);
        SeleccionarIMG("", "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtTotalErrores = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        comboExpresion = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Editor = new javax.swing.JTextArea();
        btnGenerarAutomatas = new javax.swing.JButton();
        btnAnalizarEntradas = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnJSON = new javax.swing.JButton();
        btnLimpiarConsola = new javax.swing.JButton();
        btnErrores = new javax.swing.JButton();
        txtNombreArchivo = new javax.swing.JLabel();
        btnLimpiarEditor = new javax.swing.JButton();
        IMG = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 0, 51));

        txtTotalErrores.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        txtTotalErrores.setText("Total de Errores: ");
        txtTotalErrores.setName(""); // NOI18N

        Consola.setColumns(20);
        Consola.setRows(5);
        jScrollPane1.setViewportView(Consola);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabel1.setText("Tipo:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Árbol", "Siguientes", "Transiciones", "AFD", "AFND" }));
        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabel2.setText("Expresión Regular:");

        comboExpresion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboExpresionActionPerformed(evt);
            }
        });

        Editor.setColumns(20);
        Editor.setRows(5);
        jScrollPane2.setViewportView(Editor);

        btnGenerarAutomatas.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnGenerarAutomatas.setText("Generar Autómatas");
        btnGenerarAutomatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarAutomatasActionPerformed(evt);
            }
        });

        btnAnalizarEntradas.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnAnalizarEntradas.setText("Analizar Entradas");
        btnAnalizarEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarEntradasActionPerformed(evt);
            }
        });

        btnAnterior.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnAbrir.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnSiguiente.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnSiguiente.setText("Siguiente");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnJSON.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnJSON.setText("Abrir JSON");
        btnJSON.setEnabled(false);
        btnJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJSONActionPerformed(evt);
            }
        });

        btnLimpiarConsola.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnLimpiarConsola.setText("Limpiar Consola");
        btnLimpiarConsola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarConsolaActionPerformed(evt);
            }
        });

        btnErrores.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnErrores.setText("Ver Errores");
        btnErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErroresActionPerformed(evt);
            }
        });

        txtNombreArchivo.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        txtNombreArchivo.setText("Nombre del Archivo: ");
        txtNombreArchivo.setName(""); // NOI18N

        btnLimpiarEditor.setFont(new java.awt.Font("Comic Sans MS", 3, 11)); // NOI18N
        btnLimpiarEditor.setText("Limpiar Editor");
        btnLimpiarEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarEditorActionPerformed(evt);
            }
        });

        IMG.setBackground(new java.awt.Color(0, 0, 0));
        IMG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IMG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IMG.setMaximumSize(new java.awt.Dimension(337, 337));
        IMG.setMinimumSize(new java.awt.Dimension(337, 337));
        IMG.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(btnGenerarAutomatas)
                                        .addGap(50, 50, 50)
                                        .addComponent(btnAnalizarEntradas))
                                    .addComponent(txtNombreArchivo))
                                .addGap(58, 58, 58)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(43, 43, 43)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboExpresion, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(IMG, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(143, 143, 143)
                                                .addComponent(btnAnterior)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                                                .addComponent(btnAbrir)
                                                .addGap(258, 258, 258)
                                                .addComponent(btnSiguiente)))
                                        .addGap(16, 16, 16))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnJSON)
                                .addGap(31, 31, 31)
                                .addComponent(btnLimpiarConsola)
                                .addGap(29, 29, 29)
                                .addComponent(btnLimpiarEditor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTotalErrores)
                                .addGap(99, 99, 99)
                                .addComponent(btnErrores)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtNombreArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboTipo)
                            .addComponent(comboExpresion))
                        .addGap(18, 18, 18)
                        .addComponent(IMG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerarAutomatas)
                    .addComponent(btnAnalizarEntradas)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAnterior)
                        .addComponent(btnAbrir)
                        .addComponent(btnSiguiente)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJSON)
                    .addComponent(btnLimpiarConsola)
                    .addComponent(btnErrores)
                    .addComponent(txtTotalErrores)
                    .addComponent(btnLimpiarEditor))
                .addGap(33, 33, 33))
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Guardar Como...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opciones");

        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void SeleccionarIMG(String name, String tipo){   
        if(!tipo.isEmpty() && !name.isEmpty()){
            switch(tipo){
                case "Árbol":
                    direccion = "./ARBOLES_201700761/" + name + ".jpg";
                    break;
                case "Siguientes":
                    direccion = "./SIGUIENTES_201700761/" + name + ".jpg";
                    break;
                case "Transiciones":
                    direccion = "./TRANSICIONES_201700761/" + name + ".jpg";
                    break;
                case "AFD":
                    direccion = "./AFD_201700761/" + name + ".jpg";
                    break;
                case "AFND":
                    direccion = "./AFND_201700761/" + name + ".jpg";
                    break;
            }
            try {
                ImageIcon imagen1 = new ImageIcon(direccion);
                float relacionW = 1;
                float relacionH = 1;
                if (imagen1.getIconHeight() < imagen1.getIconWidth()) {
                    relacionH = ((float) imagen1.getIconHeight() / imagen1.getIconWidth());
                } else {
                    relacionW = (float) imagen1.getIconWidth() / imagen1.getIconHeight();
                }
                Icon fondo1 = new ImageIcon(imagen1.getImage().getScaledInstance((int) ((float) IMG.getWidth() * relacionW), (int) ((float) IMG.getHeight() * relacionH), 100));
                IMG.setIcon(fondo1);
            } catch (Exception e) {
                
            }
        }
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Abrir archivo .exp
        JFileChooser pantallaCarga = new JFileChooser();
        pantallaCarga.setFileFilter(new FileNameExtensionFilter("Todos los archivos *.exp", "exp", "EXP"));
        int abrirRuta = pantallaCarga.showDialog(null, "Abrir:");
        if (abrirRuta == JFileChooser.APPROVE_OPTION) {
            FileReader file = null;
            BufferedReader buff = null;
            try {
                File archivo = pantallaCarga.getSelectedFile();
                String RutaM = pantallaCarga.getSelectedFile().getAbsolutePath();
                if (RutaM.endsWith(".EXP") || RutaM.endsWith(".Exp") || RutaM.endsWith(".exp")) {
                    file = new FileReader(archivo);
                    buff = new BufferedReader(file);
                    String linea;
                    String contenido = "";
                    path = RutaM;
                    Editor.setText(null);
                    while ((linea = buff.readLine()) != null) {
                        contenido += linea + "\n";
                    }
                    Editor.setText(contenido);
                    txtNombreArchivo.setText("Nombre del Archivo: " + name);
                } else{
                    JOptionPane.showMessageDialog(this, "El archivo tuvo un error, no se pudo abrir", "Fatal Error", JOptionPane.ERROR_MESSAGE);    
                }
            } catch (FileNotFoundException ex) {
                java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Guardar
        if (path != null) {
            try {
                FileWriter filewriter = new FileWriter(path);
                PrintWriter printwriter = new PrintWriter(filewriter);
                String[] texto = Editor.getText().split("\n");
                for (String e: texto){
                    printwriter.println(e);
                }
                filewriter.close();
                JOptionPane.showMessageDialog(null, "Archivo guardado con éxito", "Información", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //Si no existe la ruta
            JFileChooser pantallaCarga = new JFileChooser();
            pantallaCarga.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.exp", "exp", "EXP"));
            int seleccionar = pantallaCarga.showSaveDialog(null);
            try {
                if (seleccionar == JFileChooser.APPROVE_OPTION) {
                    File file = pantallaCarga.getSelectedFile();
                    String path = file.getAbsolutePath();
                    if (!(path.endsWith(".exp"))) {
                        File aux = new File(path + ".exp");
                        file = aux;
                    }
                    PrintWriter printwriter = new PrintWriter(file);
                    printwriter.print(Editor.getText());
                    printwriter.close();
                    path = file.getAbsolutePath();
                    JOptionPane.showMessageDialog(null, "Se ha guardado correctamente el archivo", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (FileNotFoundException ex) {
                java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Guardar Como
        JFileChooser pantallaCarga = new JFileChooser();
        pantallaCarga.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.exp", "exp", "EXP"));
        int seleccionar = pantallaCarga.showSaveDialog(null);
        try {
            if (seleccionar == JFileChooser.APPROVE_OPTION) {
                File file = pantallaCarga.getSelectedFile();
                String path = file.getAbsolutePath();
                if (!(path.endsWith(".exp"))) {
                    File aux = new File(path + ".exp");
                    file = aux;
                }
                PrintWriter printwriter = new PrintWriter(file);
                printwriter.print(Editor.getText());
                printwriter.close();
                path = file.getAbsolutePath();
                System.out.print(path);
                JOptionPane.showMessageDialog(null, "Se ha guardado correctamente el archivo", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Nuevo Archivo
        if (contenido.equals(Editor.getText())) {
            name = "";
            path = "";
            rutaTotal = "";
            archivo = null;
            Editor.setText("");
            contenido = "";
            comboExpresion.removeAllItems();
            txtNombreArchivo.setText("Nombre del Archivo: Nuevo archivo.exp");
            btnJSON.setEnabled(false);
            IMG.setIcon(null);
        } else {
            int op = JOptionPane.showConfirmDialog(this, "¿Guardar antes de continuar?");
            if (op == 1) {
                name = "";
                path = "";
                rutaTotal = "";
                Editor.setText("");
                contenido = "";
                comboExpresion.removeAllItems();
                archivo = null;
                IMG.setIcon(null);
                txtNombreArchivo.setText("Nombre del Archivo: Nuevo archivo.exp");
                btnJSON.setEnabled(false);
            } else if (op == 0) {
                jMenuItem3ActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnGenerarAutomatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarAutomatasActionPerformed
        // Botón Generar Automatas
        analizadores.Sintactico pars;
        comboExpresion.removeAllItems();
        try {
            errors.clear();
            Lexico lexical = new analizadores.Lexico(new StringReader(Editor.getText()));
            pars=new analizadores.Sintactico(lexical);
            pars.cont = lexical.cont;
            pars.parse();
            arboles = pars.LIST_AFD;
            errors.addAll(lexical.Errors);
            errors.addAll(pars.Errors);
            txtTotalErrores.setText("Numero de errores: "+errors.size());
            for(AFD arbol: arboles.values()){
                arbol.GraficarTodo();
                comboExpresion.addItem(arbol.nombre);
            }
            comboExpresion.setSelectedIndex(0);
            try{ Thread.sleep(300); }
            catch(Exception e ) 
            { 
                System.out.println("Thread Interrupted"); 
            }
            SeleccionarIMG((String)comboExpresion.getSelectedItem(), (String)comboTipo.getSelectedItem());
        } catch (Exception ex) {
            System.out.println("Error fatal en compilación de entrada.");
            System.out.println("Causa: "+ex.getCause());
        } 
    }//GEN-LAST:event_btnGenerarAutomatasActionPerformed

    private void btnAnalizarEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarEntradasActionPerformed
        //Botón Analizar Entradas:
        analizadores.Sintactico pars;
        try{
            File directorio = new File("./SALIDAS_201700761");
            if (!directorio.exists()) {
                directorio.mkdirs();
            }
            errors.clear();
            Lexico lexical = new analizadores.Lexico(new StringReader(Editor.getText()));
            pars = new analizadores.Sintactico(lexical);
            pars.cont = lexical.cont;
            pars.parse();
            arboles = pars.LIST_AFD;
            errors.addAll(lexical.Errors);
            errors.addAll(pars.Errors);
            txtTotalErrores.setText("Total de Errores: " + errors.size());
            List<String[]> comprobaciones = pars.Validacion;
            FileWriter fichero;
            PrintWriter escritor;
            Gson g = new Gson();
            fichero = new FileWriter("./SALIDAS_201700761/" + name + ".json");
            escritor = new PrintWriter(fichero);
            escritor.print("[\n");
            int cont = 0;
            for (String[] x : comprobaciones) {
                if (arboles.get(x[0]) != null) {
                    if (arboles.get(x[0]).ValidarCadena(x[1])) {
                        Validation val = new Validation(x[1], x[0], "Cadena Valida");
                        if (cont < comprobaciones.size()) {
                            escritor.print(g.toJson(val) + ",\n");
                        } else {
                            escritor.print(g.toJson(val) + "\n");
                        }
                        Consola.setText(Consola.getText() + "\n");
                        Consola.setText(Consola.getText() + "La expresion: \"" + x[1] + "\" es valida con la expresion Regular " + x[0]);
                    } else {
                        Consola.setText(Consola.getText() + "\n");
                        Consola.setText(Consola.getText() + "La expresion: \"" +x[1] + "\" es invalida con la expresión Regular " +x[0]);
                    }
                } else {
                    System.out.println("No existe el automata");
                }
                cont++;
            }
            escritor.print("]\n");
            fichero.close();
            btnJSON.setEnabled(true);
        } catch (Exception ex) {
            System.out.println("Error fatal en compilacion de entrada.");
            System.out.println("Causa: " + ex.getCause());
        }
    }//GEN-LAST:event_btnAnalizarEntradasActionPerformed

    private void btnJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJSONActionPerformed
        // TODO add your handling code here:
        try{
            ProcessBuilder p = new ProcessBuilder();
            p.command("cmd.exe", "/c", System.getProperty("user.dir") + "/SALIDAS_201700761/" + name + ".json");
            p.start();
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_btnJSONActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        if (comboExpresion.getItemCount() > 0) {
            if (actual == 0) {
                actual = comboExpresion.getItemCount() - 1;
                comboExpresion.setSelectedIndex(actual);
            } else {
                actual--;
                comboExpresion.setSelectedIndex(actual);
            }
        }
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        // TODO add your handling code here:
        try {
            ProcessBuilder p = new ProcessBuilder();
            p.command("cmd.exe", "/c", System.getProperty("user.dir") + direccion.substring(1, direccion.length()));
            p.start();
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        if (comboExpresion.getItemCount() > 0) {
            if (actual == comboExpresion.getItemCount() - 1) {
                actual = 0;
                comboExpresion.setSelectedIndex(actual);
            } else {
                actual++;
                comboExpresion.setSelectedIndex(actual);
            }
        }
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnLimpiarConsolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarConsolaActionPerformed
        // TODO add your handling code here:
        Consola.setText("");
    }//GEN-LAST:event_btnLimpiarConsolaActionPerformed

    private void btnErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnErroresActionPerformed
        // TODO add your handling code here:
        File directorio = new File("./ERRORES_201700761/" + name + ".dot");
        if (!directorio.exists()) {
            directorio.mkdirs();
        }
        FileWriter fichero;
        PrintWriter escritor;
        try{
            fichero = new FileWriter("./ERRORES_201700761/" + name + ".dot");
            escritor = new PrintWriter(fichero);
            escritor.print("digraph grafica{\n"
                + "rankdir=TB;\n"
                + "forcelabels= true;\n"
                + "node [shape = plain];\n");
            String td = "";
            for(Errores dato: errors){
                td+="<tr>\n"
                    + "<td>"+dato.numero+"</td>\n"
                    + "<td>"+dato.tipo+"</td>\n"
                    + "<td>"+dato.descripcion+"</td>\n"
                    + "<td>"+dato.linea+"</td>\n"
                    + "<td>"+dato.colummna+"</td>\n"
                    + "</tr>\n";
            }
            String tabla = "<<table border = '1' cellboder = '1' cellspacing='0' cellpadding='10'>\n"
                    + "<tr>\n"
                    + "<td COLSPAN = '5'>TABLA DE ERRORES</td>\n"
                    + "</tr>\n"
                    + "<tr>\n"
                    + "<td>#</td>\n"
                    + "<td>Tipo</td>\n"
                    + "<td>Descripcion</td>\n"
                    + "<td>Linea</td>\n"
                    + "<td>Columna</td>\n"
                    + "</tr>\n"
                    + td
                    + "</table>>";
            String text = "TABLA [label = "+tabla+"];\n";
            escritor.print(text);
            escritor.print("\n}");
            fichero.close();
            Runtime rt = Runtime.getRuntime();
            rt.exec( "dot -Tsvg -o ./ERRORES_201700761/" + name + ".svg graf ./ERRORES_201700761/" + name + ".dot");
            ProcessBuilder p = new ProcessBuilder();
            p.command("cmd.exe","/c",System.getProperty("user.dir") + "/ERRORES_201700761/" + name + ".svg");
            p.start();
        }catch (IOException e) {
            System.out.println("Error al crear la grafica");
        }
    }//GEN-LAST:event_btnErroresActionPerformed

    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        // TODO add your handling code here:
        SeleccionarIMG(comboExpresion.getSelectedItem().toString(), comboTipo.getSelectedItem().toString());
    }//GEN-LAST:event_comboTipoActionPerformed

    private void comboExpresionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboExpresionActionPerformed
        // TODO add your handling code here:
        try{
            SeleccionarIMG(comboExpresion.getSelectedItem().toString(), comboTipo.getSelectedItem().toString());
            actual = comboExpresion.getSelectedIndex();
        }catch (Exception e) {
            
        }
    }//GEN-LAST:event_comboExpresionActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Gracias por preferirnos. Cerrando programa.");
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void btnLimpiarEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarEditorActionPerformed
        // TODO add your handling code here:
        Editor.setText("");
    }//GEN-LAST:event_btnLimpiarEditorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Consola;
    private javax.swing.JTextArea Editor;
    private javax.swing.JLabel IMG;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAnalizarEntradas;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnErrores;
    private javax.swing.JButton btnGenerarAutomatas;
    private javax.swing.JButton btnJSON;
    private javax.swing.JButton btnLimpiarConsola;
    private javax.swing.JButton btnLimpiarEditor;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JComboBox<String> comboExpresion;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel txtNombreArchivo;
    private javax.swing.JLabel txtTotalErrores;
    // End of variables declaration//GEN-END:variables

}
